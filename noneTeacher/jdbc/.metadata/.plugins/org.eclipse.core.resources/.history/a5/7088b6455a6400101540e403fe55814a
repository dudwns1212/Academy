package project;
// 정리본이라 오류는 무시하셔도 됩니다.
public class 정리본 {
	// 메인을 최소화 하자/ 표기법은 camel 표기법을 사용하자 / 내가 종료하기 전 까지 어떤 오류가 떠도 꺼지지 않게 하자 
	//메인 실행
	public class Db_main {
		public static void main(String[] args) {
			MenuController.setContext(); 
			MenuController.run();
		}
	}
	
	// 메인에서 인터페이스 구현하기 위한 메뉴컨트롤러
	public class MenuController {
		static Scanner scan; //사용하는 메서드가 static이므로 변수도 static으로    
		static Db_method db;
		
		// setContext 함수 실행 -> db생성자로 connection(연결), san 사용
		static public void setContext() { // main이 스태틱메서드니까 setContext나 run메서드도 스태틱으로
		scan = new Scanner(System.in);
		db = new Db_method();
		}
		// run 함수 실행 -> 인터페이스 실행
		static public void run() {
		while(true) { // 숫자 이외의 문자 입력시 오류
				System.out.println("==기능을 선택하세요==");
				System.out.println("1. 직원이름으로 직원정보 검색하기");
				System.out.println("2. 입사년도로 직원정보 검색하기");
				System.out.println("3. 부서번호로 직원정보 검색하기");
				System.out.println("4. 직무로 직원정보 검색하기");
				System.out.println("5. 도시이름으로 직원정보 검색하기");
				System.out.println("6. 통계자료 출력하기");
				System.out.println("7. 부서장 성으로 부서원 정보 검색하기");
				System.out.println("8. 나라이름으로 직원정보 검색하기");
				System.out.println("0. 프로그램 종료하기");
				System.out.println("선택 >>");
				String num = scan.nextLine();
				
				int number=0;
		
				// scan으로 입력한 문자를 숫자로 바꾸는 과정에서 만약 문자를 입력하거나 숫자가 0~8 이외의 숫자라면
				// 각각 다른 오류가 발생하게 try, catch절을 사용하여 만듦
				// 각각의 오류 exception은 클래스로 만들어서 원하는 오류가 뜨게 설정
				try {
				    number = Integer.parseInt(num);
				    if (number < 0 || number > 8) {
				        throw new SelectNumberException();
				    }
				} catch (NumberFormatException e) {
				    System.out.println(new SelectInputException().getMessage());
				    run();
				} catch (SelectNumberException e) {
				    System.out.println(e.getMessage());
				}
				
				// switch문을 이용해 scan을 통해 받은 문자 -> 정수로 바꾼 number를 받아 case문 실행
				switch (number) {
					case 1 -> { 
							System.out.print("직원 이름을 입력하세요 : ");
							String fullName = scan.nextLine();
							db.findEmpInfoByEmpName(fullName);
					}					
					case 2 -> {
							System.out.print("입사년도를 입력하세요 : ");
							int year = scan.nextInt();
							scan.nextLine();
							db.findEmpInfoByHireYear(year);
					}
					case 3 -> {
							System.out.println("부서번호를 입력하세요 : [ex100]");
							int dpId = scan.nextInt();
							scan.nextLine();
							db.findEmpInfoByDeptId(dpId);
					}
					case 4 -> {
							System.out.print("직무를 입력하세요 : ");
							String job = scan.nextLine();
							db.findEmpInfoByJobId(job);
					}
					case 5 -> {
						System.out.print("도시명을 입력하세요 : ");
						String cityName = scan.nextLine();
						db.findEmpInfoByCity(cityName);
					}
					case 6 -> {
						System.out.println("어떤 연봉 통계자료를 출력할까요?");
						System.out.println("1. 부서별");
						System.out.println("2. 직무별");
						System.out.println("3. 도시별");
						System.out.println("4. 나라별");
						System.out.println("5. 대륙별");
						int selectSummry = scan.nextInt();
						db.getEmpSummaryData(selectSummry);	
					}
					case 7 -> {
						System.out.print("부서장 성을 입력하세요 : ");
						String managerLastName = scan.nextLine();
						db.findEmpInfoByManagerLastName(managerLastName);
					}
					case 8 -> {
						System.out.print("나라이름을 입력하세요 : ");
						String countryName = scan.nextLine();
						db.findEmpInfoByCountryName(countryName);
					}
					case 0 -> { 
						db.close();
						System.out.println("프로그램 종료");
							return;
				}
				
			}
			} 
			} 
		
		}
	
	// 숫자말고 문자를 입력했을때의 오류
	public class SelectInputException extends Exception{
		public SelectInputException() {
			super("//오류가 발생하였습니다 \n오류번호 02: 문자입력 오류 \n문자를 제외하고 숫자를 입력해 주세요//");
		}
	}




	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
